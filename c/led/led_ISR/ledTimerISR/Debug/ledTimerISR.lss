
ledTimerISR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000166  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000166  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d7  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064b  00000000  00000000  0000094f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000265  00000000  00000000  00000f9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001200  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000376  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  000015ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001617  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_11>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  8e:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <setup>:
//ele sunt definite in avr/interrupt.h
//practic ele modifica valoarea bitului I din registrul SREG
volatile int counter=5;
void setup()
{
	DDRB=0x3C;//the pins are configured after the schematic found on "schematic.pdf"
  96:	8c e3       	ldi	r24, 0x3C	; 60
  98:	84 b9       	out	0x04, r24	; 4
	DDRC=0x00;
  9a:	17 b8       	out	0x07, r1	; 7
	PORTB=0xFF;
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	85 b9       	out	0x05, r24	; 5
	TCCR1A=0x00;
  a0:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B=0x04;
  a4:	84 e0       	ldi	r24, 0x04	; 4
  a6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A=62500;//1s timer
  aa:	84 e2       	ldi	r24, 0x24	; 36
  ac:	94 ef       	ldi	r25, 0xF4	; 244
  ae:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  b2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCNT1=0;
  b6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  ba:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TIMSK1=0x02;
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
  c4:	08 95       	ret

000000c6 <__vector_11>:
}
ISR(TIMER1_COMPA_vect)
{
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
	TCNT1=0;
  d4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  d8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	if(counter==2)
  dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  e0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  e4:	02 97       	sbiw	r24, 0x02	; 2
  e6:	39 f4       	brne	.+14     	; 0xf6 <__vector_11+0x30>
	counter=5;
  e8:	85 e0       	ldi	r24, 0x05	; 5
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
  f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  f4:	09 c0       	rjmp	.+18     	; 0x108 <__vector_11+0x42>
	else counter--;
  f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 104:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	
}
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <main>:
int main(void)
{
	cli();//echivalent cu noInterrupts();
 116:	f8 94       	cli
	setup();
 118:	0e 94 4b 00 	call	0x96	; 0x96 <setup>
	sei();//echivalent cu interrupts()
 11c:	78 94       	sei
	while (1)
	{
		PORTB=0xFF;
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	85 b9       	out	0x05, r24	; 5
		if((PINC&0x01)==0)
 122:	30 99       	sbic	0x06, 0	; 6
 124:	0f c0       	rjmp	.+30     	; 0x144 <main+0x2e>
			PORTB&=(1<<counter);
 126:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 12a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <main+0x22>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	2a 95       	dec	r18
 13a:	e2 f7       	brpl	.-8      	; 0x134 <main+0x1e>
 13c:	95 b1       	in	r25, 0x05	; 5
 13e:	89 23       	and	r24, r25
 140:	85 b9       	out	0x05, r24	; 5
 142:	ed cf       	rjmp	.-38     	; 0x11e <main+0x8>
		else
			PORTB^=(1<<counter);
 144:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 148:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <main+0x40>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	2a 95       	dec	r18
 158:	e2 f7       	brpl	.-8      	; 0x152 <main+0x3c>
 15a:	95 b1       	in	r25, 0x05	; 5
 15c:	89 27       	eor	r24, r25
 15e:	85 b9       	out	0x05, r24	; 5
 160:	de cf       	rjmp	.-68     	; 0x11e <main+0x8>

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>


Spi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006d7  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064b  00000000  00000000  0000092f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000028a  00000000  00000000  00000f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00001204  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000377  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  000015d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  88:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_11>:
}
#endif

#ifdef MASTER
volatile int flag=0;
ISR(TIMER1_COMPA_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	flag =1;
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	TCNT1=0;
  aa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  ae:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	TIFR1 =2;
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	86 bb       	out	0x16, r24	; 22
}
  b6:	9f 91       	pop	r25
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <setup_master>:
#endif

#ifdef MASTER
void setup_master(){
	SPCR =   (1<<SPIE)|(1<<SPE)|   (1<<MSTR)|      (1<<SPR0)|(1<<SPR1);
  c4:	83 ed       	ldi	r24, 0xD3	; 211
  c6:	8c bd       	out	0x2c, r24	; 44
	PRR &= ~(1<<PRSPI);
  c8:	e4 e6       	ldi	r30, 0x64	; 100
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	8b 7f       	andi	r24, 0xFB	; 251
  d0:	80 83       	st	Z, r24
	TCCR1A = 0;
  d2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = 0b00001101;
  d6:	8d e0       	ldi	r24, 0x0D	; 13
  d8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TCCR1C = 0;
  dc:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__DATA_REGION_ORIGIN__+0x22>
	OCR1A = 15625;
  e0:	89 e0       	ldi	r24, 0x09	; 9
  e2:	9d e3       	ldi	r25, 0x3D	; 61
  e4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  e8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TIMSK1 = 2;
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	TIFR1 = 2;
  f2:	86 bb       	out	0x16, r24	; 22
	
	DDRB = 0b00101100; // Set MOSI, SCK, and SS as outputs
  f4:	8c e2       	ldi	r24, 0x2C	; 44
  f6:	84 b9       	out	0x04, r24	; 4
	
	UCSR0A = 0;
  f8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	UCSR0B = 0b00011000;
  fc:	88 e1       	ldi	r24, 0x18	; 24
  fe:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = 0b00101110;
 102:	8e e2       	ldi	r24, 0x2E	; 46
 104:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	UBRR0 = 103;
 108:	87 e6       	ldi	r24, 0x67	; 103
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 110:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	
	sei();
 114:	78 94       	sei
 116:	08 95       	ret

00000118 <main>:
}
#endif
int main(void)
{
	#ifdef MASTER
	setup_master();
 118:	0e 94 62 00 	call	0xc4	; 0xc4 <setup_master>
	setup_slave();
	#endif
	#ifdef MASTER
	while (1){
		if(flag){
			UDR0 ='1';
 11c:	e6 ec       	ldi	r30, 0xC6	; 198
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	21 e3       	ldi	r18, 0x31	; 49
	#ifdef SLAVE
	setup_slave();
	#endif
	#ifdef MASTER
	while (1){
		if(flag){
 122:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 126:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 12a:	89 2b       	or	r24, r25
 12c:	d1 f3       	breq	.-12     	; 0x122 <main+0xa>
			UDR0 ='1';
 12e:	20 83       	st	Z, r18
			PORTB &= ~(1<<PORTB2); // Drive SS low
 130:	2a 98       	cbi	0x05, 2	; 5
			SPDR = 0x31;
 132:	2e bd       	out	0x2e, r18	; 46
			PORTB |= (1 << PORTB2); //set SS
 134:	2a 9a       	sbi	0x05, 2	; 5
			flag = 0;
 136:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 13a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 13e:	f1 cf       	rjmp	.-30     	; 0x122 <main+0xa>

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>

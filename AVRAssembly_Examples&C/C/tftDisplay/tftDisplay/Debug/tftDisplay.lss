
tftDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000274  000002e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000274  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b60  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000743  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000409  00000000  00000000  00001663  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00001a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000422  00000000  00000000  00001b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003d3  00000000  00000000  00001f82  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002355  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 30 01 	call	0x260	; 0x260 <main>
  8e:	0c 94 38 01 	jmp	0x270	; 0x270 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <delay>:
#define DATA()    PORTD |= (1<<PORTD3);  // DC is set to data    on 1
#define RESET_LOW() PORTD &= ~(1<<PORTD2);
#define RESET_HIGH() PORTD |= (1<<PORTD2);

void delay(int param){
	param = param*20;//default 1.25us
  96:	24 e1       	ldi	r18, 0x14	; 20
  98:	ac 01       	movw	r20, r24
  9a:	24 9f       	mul	r18, r20
  9c:	c0 01       	movw	r24, r0
  9e:	25 9f       	mul	r18, r21
  a0:	90 0d       	add	r25, r0
  a2:	11 24       	eor	r1, r1
	for(int i=0;i<param;i++){
  a4:	18 16       	cp	r1, r24
  a6:	19 06       	cpc	r1, r25
  a8:	44 f4       	brge	.+16     	; 0xba <delay+0x24>
  aa:	20 e0       	ldi	r18, 0x00	; 0
  ac:	30 e0       	ldi	r19, 0x00	; 0
		asm volatile("nop");
  ae:	00 00       	nop
#define RESET_LOW() PORTD &= ~(1<<PORTD2);
#define RESET_HIGH() PORTD |= (1<<PORTD2);

void delay(int param){
	param = param*20;//default 1.25us
	for(int i=0;i<param;i++){
  b0:	2f 5f       	subi	r18, 0xFF	; 255
  b2:	3f 4f       	sbci	r19, 0xFF	; 255
  b4:	82 17       	cp	r24, r18
  b6:	93 07       	cpc	r25, r19
  b8:	d1 f7       	brne	.-12     	; 0xae <delay+0x18>
  ba:	08 95       	ret

000000bc <spi_transfer>:
		asm volatile("nop");
	}
}

void spi_transfer(uint8_t data){
	PORTB &= ~(1<<PORTB2);     // set ss low
  bc:	2a 98       	cbi	0x05, 2	; 5
	SPDR = data;               // send data
  be:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); // wait for transfer to complete
  c0:	0d b4       	in	r0, 0x2d	; 45
  c2:	07 fe       	sbrs	r0, 7
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <spi_transfer+0x4>
	PORTB |= (1 << PORTB2);    // set ss high
  c6:	2a 9a       	sbi	0x05, 2	; 5
  c8:	08 95       	ret

000000ca <send_command>:
}

void send_command(uint8_t command){
	COMMAND();
  ca:	5b 98       	cbi	0x0b, 3	; 11
	spi_transfer(command);
  cc:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>
  d0:	08 95       	ret

000000d2 <send_data>:
}

void send_data(uint8_t data){
	DATA();
  d2:	5b 9a       	sbi	0x0b, 3	; 11
	spi_transfer(data);
  d4:	0e 94 5e 00 	call	0xbc	; 0xbc <spi_transfer>
  d8:	08 95       	ret

000000da <setup>:
}

void setup(){
	SPCR = (1<<MSTR)  | // Enable master mode
  da:	83 e5       	ldi	r24, 0x53	; 83
  dc:	8c bd       	out	0x2c, r24	; 44
	(1<<SPE)   | // Enable SPI
	(1<<SPR1)  |
	(1<<SPR0);   // Set clk to 16MHz/128 = 125kHz

	DDRB = (1<<PORTB3) | // MOSI pin
  de:	8c e2       	ldi	r24, 0x2C	; 44
  e0:	84 b9       	out	0x04, r24	; 4
	(1<<PORTB2) | // SS pin
	(1<<PORTB5);  // CLK pin
	DDRD = (1<<PORTD2) | // RST - LCD
  e2:	8c e0       	ldi	r24, 0x0C	; 12
  e4:	8a b9       	out	0x0a, r24	; 10
	(1<<PORTD3);  // DC - LCD
	PORTD = 0;
  e6:	1b b8       	out	0x0b, r1	; 11

	RESET_LOW(); // reset the display
  e8:	5a 98       	cbi	0x0b, 2	; 11
	delay(1);    // 1.25uS
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 4b 00 	call	0x96	; 0x96 <delay>
	RESET_HIGH(); // pull reset high
  f2:	5a 9a       	sbi	0x0b, 2	; 11
	delay(1);
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 4b 00 	call	0x96	; 0x96 <delay>

	send_command(0x01); // software reset
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0e 94 65 00 	call	0xca	; 0xca <send_command>
	delay(1);
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 4b 00 	call	0x96	; 0x96 <delay>
	send_command(0x11); // exit sleep mode
 10a:	81 e1       	ldi	r24, 0x11	; 17
 10c:	0e 94 65 00 	call	0xca	; 0xca <send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	8b ed       	ldi	r24, 0xDB	; 219
 114:	95 e0       	ldi	r25, 0x05	; 5
 116:	21 50       	subi	r18, 0x01	; 1
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <setup+0x3c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <setup+0x46>
 120:	00 00       	nop
	_delay_ms(120);     // minimum is 120ms

	send_command(0x39); // idle mode on for 8 color mode
 122:	89 e3       	ldi	r24, 0x39	; 57
 124:	0e 94 65 00 	call	0xca	; 0xca <send_command>
	delay(1);
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 4b 00 	call	0x96	; 0x96 <delay>
 130:	08 95       	ret

00000132 <set_address_window>:
}

void set_address_window(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	08 2f       	mov	r16, r24
 13c:	d6 2f       	mov	r29, r22
 13e:	14 2f       	mov	r17, r20
 140:	c2 2f       	mov	r28, r18
	send_command(0x2A); // Column address set
 142:	8a e2       	ldi	r24, 0x2A	; 42
 144:	0e 94 65 00 	call	0xca	; 0xca <send_command>
	send_data(0x00);
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	0e 94 69 00 	call	0xd2	; 0xd2 <send_data>
	send_data(x0);
 14e:	80 2f       	mov	r24, r16
 150:	0e 94 69 00 	call	0xd2	; 0xd2 <send_data>
	send_data(0x00);
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 69 00 	call	0xd2	; 0xd2 <send_data>
	send_data(x1);
 15a:	81 2f       	mov	r24, r17
 15c:	0e 94 69 00 	call	0xd2	; 0xd2 <send_data>

	send_command(0x2B); // Row address set
 160:	8b e2       	ldi	r24, 0x2B	; 43
 162:	0e 94 65 00 	call	0xca	; 0xca <send_command>
	send_data(0x00);
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	0e 94 69 00 	call	0xd2	; 0xd2 <send_data>
	send_data(y0);
 16c:	8d 2f       	mov	r24, r29
 16e:	0e 94 69 00 	call	0xd2	; 0xd2 <send_data>
	send_data(0x00);
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 69 00 	call	0xd2	; 0xd2 <send_data>
	send_data(y1);
 178:	8c 2f       	mov	r24, r28
 17a:	0e 94 69 00 	call	0xd2	; 0xd2 <send_data>

	send_command(0x2C); // Memory write
 17e:	8c e2       	ldi	r24, 0x2C	; 44
 180:	0e 94 65 00 	call	0xca	; 0xca <send_command>
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	1f 91       	pop	r17
 18a:	0f 91       	pop	r16
 18c:	08 95       	ret

0000018e <draw_pixel>:

void draw_pixel(uint8_t red, uint8_t green, uint8_t blue) {
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	d6 2f       	mov	r29, r22
 194:	c4 2f       	mov	r28, r20
	send_data(red);
 196:	0e 94 69 00 	call	0xd2	; 0xd2 <send_data>
	send_data(green);
 19a:	8d 2f       	mov	r24, r29
 19c:	0e 94 69 00 	call	0xd2	; 0xd2 <send_data>
	send_data(blue);
 1a0:	8c 2f       	mov	r24, r28
 1a2:	0e 94 69 00 	call	0xd2	; 0xd2 <send_data>
}
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <draw_char>:

void draw_char(uint8_t x, uint8_t y, char c) {
 1ac:	cf 92       	push	r12
 1ae:	df 92       	push	r13
 1b0:	ef 92       	push	r14
 1b2:	ff 92       	push	r15
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	27 97       	sbiw	r28, 0x07	; 7
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	f8 94       	cli
 1c6:	de bf       	out	0x3e, r29	; 62
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	cd bf       	out	0x3d, r28	; 61
	uint8_t letter[7] = {
 1cc:	97 e0       	ldi	r25, 0x07	; 7
 1ce:	e0 e0       	ldi	r30, 0x00	; 0
 1d0:	f1 e0       	ldi	r31, 0x01	; 1
 1d2:	de 01       	movw	r26, r28
 1d4:	11 96       	adiw	r26, 0x01	; 1
 1d6:	01 90       	ld	r0, Z+
 1d8:	0d 92       	st	X+, r0
 1da:	9a 95       	dec	r25
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <draw_char+0x2a>
		0b10001,
		0b10001,
		0b10001
	};

	set_address_window(x, y, x + 4, y + 6); // Set window for 5x7 character
 1de:	26 e0       	ldi	r18, 0x06	; 6
 1e0:	26 0f       	add	r18, r22
 1e2:	44 e0       	ldi	r20, 0x04	; 4
 1e4:	48 0f       	add	r20, r24
 1e6:	0e 94 99 00 	call	0x132	; 0x132 <set_address_window>
 1ea:	8e 01       	movw	r16, r28
 1ec:	0f 5f       	subi	r16, 0xFF	; 255
 1ee:	1f 4f       	sbci	r17, 0xFF	; 255
 1f0:	7e 01       	movw	r14, r28
 1f2:	88 e0       	ldi	r24, 0x08	; 8
 1f4:	e8 0e       	add	r14, r24
 1f6:	f1 1c       	adc	r15, r1
 1f8:	1f c0       	rjmp	.+62     	; 0x238 <draw_char+0x8c>

	for (int row = 0; row < 7; row++) {
		for (int col = 0; col < 5; col++) {
			if (letter[row] & (1 << (4 - col))) {
 1fa:	f8 01       	movw	r30, r16
 1fc:	80 81       	ld	r24, Z
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0c 2c       	mov	r0, r12
 202:	02 c0       	rjmp	.+4      	; 0x208 <draw_char+0x5c>
 204:	95 95       	asr	r25
 206:	87 95       	ror	r24
 208:	0a 94       	dec	r0
 20a:	e2 f7       	brpl	.-8      	; 0x204 <draw_char+0x58>
 20c:	80 ff       	sbrs	r24, 0
 20e:	06 c0       	rjmp	.+12     	; 0x21c <draw_char+0x70>
				draw_pixel(0xFF, 0x00, 0x00); // Red pixel
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	0e 94 c7 00 	call	0x18e	; 0x18e <draw_pixel>
 21a:	05 c0       	rjmp	.+10     	; 0x226 <draw_char+0x7a>
				} else {
				draw_pixel(0x00, 0x00, 0x00); // Black pixel
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	0e 94 c7 00 	call	0x18e	; 0x18e <draw_pixel>
 226:	f1 e0       	ldi	r31, 0x01	; 1
 228:	cf 1a       	sub	r12, r31
 22a:	d1 08       	sbc	r13, r1
 22c:	30 f7       	brcc	.-52     	; 0x1fa <draw_char+0x4e>
 22e:	0f 5f       	subi	r16, 0xFF	; 255
 230:	1f 4f       	sbci	r17, 0xFF	; 255
		0b10001
	};

	set_address_window(x, y, x + 4, y + 6); // Set window for 5x7 character

	for (int row = 0; row < 7; row++) {
 232:	e0 16       	cp	r14, r16
 234:	f1 06       	cpc	r15, r17
 236:	29 f0       	breq	.+10     	; 0x242 <draw_char+0x96>
	send_data(red);
	send_data(green);
	send_data(blue);
}

void draw_char(uint8_t x, uint8_t y, char c) {
 238:	68 94       	set
 23a:	cc 24       	eor	r12, r12
 23c:	c2 f8       	bld	r12, 2
 23e:	d1 2c       	mov	r13, r1
 240:	dc cf       	rjmp	.-72     	; 0x1fa <draw_char+0x4e>
				} else {
				draw_pixel(0x00, 0x00, 0x00); // Black pixel
			}
		}
	}
}
 242:	27 96       	adiw	r28, 0x07	; 7
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	f8 94       	cli
 248:	de bf       	out	0x3e, r29	; 62
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	cd bf       	out	0x3d, r28	; 61
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	ff 90       	pop	r15
 258:	ef 90       	pop	r14
 25a:	df 90       	pop	r13
 25c:	cf 90       	pop	r12
 25e:	08 95       	ret

00000260 <main>:

int main(void) {
	setup();
 260:	0e 94 6d 00 	call	0xda	; 0xda <setup>

	draw_char(10, 10, 'A'); // Draw letter 'A' at position (10, 10)
 264:	41 e4       	ldi	r20, 0x41	; 65
 266:	6a e0       	ldi	r22, 0x0A	; 10
 268:	8a e0       	ldi	r24, 0x0A	; 10
 26a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <draw_char>
 26e:	ff cf       	rjmp	.-2      	; 0x26e <main+0xe>

00000270 <_exit>:
 270:	f8 94       	cli

00000272 <__stop_program>:
 272:	ff cf       	rjmp	.-2      	; 0x272 <__stop_program>
